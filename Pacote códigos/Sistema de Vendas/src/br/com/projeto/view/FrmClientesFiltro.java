/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.projeto.view;

import br.com.projeto.dao.ClientesDao;
import br.com.projeto.model.Clientes;
import br.com.projeto.model.Utilitarios;
import java.awt.event.KeyEvent;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Rafael Godoy
 */
public class FrmClientesFiltro extends javax.swing.JFrame {

    private String origem = null; // Variável para determinar qual form chamou esse, assim determina quais ações serão executadas
    // de acordo com a origem em questão.

    /**
     * Os métodos mostrarTela especifica qual form chamou esse, esse form pode
     * trocar informações (buscar e levar) com o form que o chamou.
     */
    private FrmVendas vendas;

    public void mostrarTela(FrmVendas vend) {
        this.vendas = vend;
        this.origem = "requisicao";
        setVisible(true);
    }

    private FrmClientes clientes;

    public void mostrarTela(FrmClientes cli) {
        this.clientes = cli;
        this.origem = "clientes";
        setVisible(true);
    }

    private FrmContaReceberFiltro contasReceberFiltro;

    public void mostrarTela(FrmContaReceberFiltro ContRecFil) {
        this.contasReceberFiltro = ContRecFil;
        this.origem = "contasReceberFiltro";
        setVisible(true);
    }

    private FrmVendasContaReceber contasReceber;

    public void mostrarTela(FrmVendasContaReceber contRec) {
        this.contasReceber = contRec;
        this.origem = "contasReceber";
        setVisible(true);
    }

    private FrmVendasContaRecLiq contasRecLiq;

    public void mostrarTela(FrmVendasContaRecLiq contRecLiq) {
        this.contasRecLiq = contRecLiq;
        this.origem = "contasRecLiq";
        setVisible(true);
    }

    private FrmVendasFiltroReq vendasFiltro;

    public void mostrarTela(FrmVendasFiltroReq vendFiltro) {
        this.vendasFiltro = vendFiltro;
        this.origem = "vendasFiltro";
        setVisible(true);
    }

    public FrmClientesFiltro() {
        initComponents();

        Utilitarios util = new Utilitarios();
        util.inserirIcone(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        btnOk = new javax.swing.JButton();
        txtNome = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tb_Clientes = new javax.swing.JTable();
        btnPesquisar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Filtro de Clientes");
        setUndecorated(true);

        jPanel3.setBackground(new java.awt.Color(173, 198, 242));
        jPanel3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        btnOk.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/ok.png"))); // NOI18N
        btnOk.setToolTipText("OK");
        btnOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkActionPerformed(evt);
            }
        });

        txtNome.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtNome.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtNomeKeyPressed(evt);
            }
        });

        tb_Clientes.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tb_Clientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome", "CPF", "Celular"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tb_Clientes.setRowHeight(20);
        jScrollPane1.setViewportView(tb_Clientes);
        if (tb_Clientes.getColumnModel().getColumnCount() > 0) {
            tb_Clientes.getColumnModel().getColumn(0).setPreferredWidth(30);
            tb_Clientes.getColumnModel().getColumn(1).setPreferredWidth(180);
        }

        btnPesquisar.setText("Pesquisar");
        btnPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnPesquisar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addComponent(btnOk, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(btnPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(btnOk, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel1.setBackground(new java.awt.Color(0, 0, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Filtrar Clientes");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(215, 215, 215)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(5, 5, 5))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(5, 5, 5))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisarActionPerformed
        String texto = txtNome.getText();

        DefaultTableModel dados = (DefaultTableModel) tb_Clientes.getModel();
        dados.setNumRows(0);
        ClientesDao dao = new ClientesDao();

        //lista todos os clientes que constam no banco de dados.
        if (texto.equals("")) {

            List<Clientes> lista = dao.listarClientes();

            for (Clientes c : lista) {
                dados.addRow(new Object[]{
                    c.getId(),
                    c.getNome(),
                    c.getCpf(),
                    c.getCelular()
                });
            }
            //lista apenas os clientes que comecem com a busca efetuada pelo usuário.    
        } else {
            String nome = txtNome.getText() + "%";

            List<Clientes> lista = dao.consultarPorNome(nome);

            for (Clientes c : lista) {
                dados.addRow(new Object[]{
                    c.getId(),
                    c.getNome(),
                    c.getCpf(),
                    c.getCelular()
                });
            }
        }

    }//GEN-LAST:event_btnPesquisarActionPerformed

    private void btnOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOkActionPerformed

        /**
         * trará as informações de acordo com o cliente selecionado, e retornará
         * somente as informações pertinentes, ou seja, dependendo do form de
         * origem, ele retornará as informções que aquele form precisa.
         */
        if (origem.equals("requisicao")) {

            int idValidacao = tb_Clientes.getSelectedRowCount();

            if (idValidacao == 0) {
                this.dispose();
            } else {
                vendas.txtIdCliente.setText(tb_Clientes.getValueAt(tb_Clientes.getSelectedRow(), 0).toString());
                vendas.txtNomeCliente.setText(tb_Clientes.getValueAt(tb_Clientes.getSelectedRow(), 1).toString());
                this.dispose();
            }

        } else if (origem.equals("vendasFiltro")) {

            int idValidacao = tb_Clientes.getSelectedRowCount();

            if (idValidacao == 0) {
                this.dispose();
            } else {
                vendasFiltro.txtCliente.setText(tb_Clientes.getValueAt(tb_Clientes.getSelectedRow(), 0).toString());
                this.dispose();
            }

        } else if (origem.equals("clientes")) {

            int idValidacao = tb_Clientes.getSelectedRowCount();

            if (idValidacao == 0) {
                this.dispose();
            } else {
                int id = Integer.parseInt(tb_Clientes.getValueAt(tb_Clientes.getSelectedRow(), 0).toString());

                ClientesDao dao = new ClientesDao();
                Clientes obj = new Clientes();

                obj = dao.consultarPorId(id);

                clientes.filtro = "sim";

                clientes.txtId.setText(String.valueOf(obj.getId()));
                clientes.txtNome.setText(obj.getNome());
                clientes.txtCpf.setText(obj.getCpf());
                clientes.txtCpf.setText(obj.getRg());

                SimpleDateFormat formato = new SimpleDateFormat("yyyy-MM-dd");
                Date nascimento;
                try {
                    nascimento = formato.parse(obj.getNascimento());
                    clientes.txtNascimento.setDate(nascimento);
                } catch (Exception e) {
                }

                clientes.txtTelefone.setText(obj.getTelefone());
                clientes.txtCelular.setText(obj.getCelular());
                clientes.txtEmail.setText(obj.getEmail());
                clientes.txtEndereco.setText(obj.getEndereco());
                clientes.txtNumero.setText(obj.getNumero());
                clientes.txtComplemento.setText(obj.getComplemento());
                clientes.txtBairro.setText(obj.getBairro());
                clientes.txtCidade.setText(obj.getCidade());
                clientes.cbUf.setSelectedItem(obj.getUf());
                clientes.txtCep.setText(obj.getCep());
                clientes.txtObservacoes.setText(obj.getObservacoes());

                this.dispose();

            }

        } else if (origem.equals("contasReceberFiltro")) {

            int idValidacao = tb_Clientes.getSelectedRowCount();

            if (idValidacao == 0) {
                this.dispose();
            } else {
                String id = tb_Clientes.getValueAt(tb_Clientes.getSelectedRow(), 0).toString();

                contasReceberFiltro.txtCliente.setText(id);
                this.dispose();
            }

        } else if (origem.equals("contasReceber")) {
            int idValidacao = tb_Clientes.getSelectedRowCount();

            if (idValidacao == 0) {
                this.dispose();
            } else {
                String id = tb_Clientes.getValueAt(tb_Clientes.getSelectedRow(), 0).toString();
                String nome = tb_Clientes.getValueAt(tb_Clientes.getSelectedRow(), 1).toString();

                contasReceber.txtIdCliente.setText(id);
                contasReceber.txtCliente.setText(nome);
                contasReceber.txtIdPlano.requestFocus();
                contasReceber.txtIdPlano.selectAll();
                this.dispose();
            }
        } else if (origem.equals("contasRecLiq")) {
            int idValidacao = tb_Clientes.getSelectedRowCount();

            if (idValidacao == 0) {
                this.dispose();
            } else {
                String id = tb_Clientes.getValueAt(tb_Clientes.getSelectedRow(), 0).toString();
                String nome = tb_Clientes.getValueAt(tb_Clientes.getSelectedRow(), 1).toString();

                contasRecLiq.txtIdCliente.setText(id);
                contasRecLiq.txtCliente.setText(nome);

                contasRecLiq.txtIdPlano.requestFocus();
                contasRecLiq.txtIdPlano.selectAll();
                this.dispose();
            }
        }


    }//GEN-LAST:event_btnOkActionPerformed

    private void txtNomeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNomeKeyPressed

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            String texto = txtNome.getText();

            DefaultTableModel dados = (DefaultTableModel) tb_Clientes.getModel();
            dados.setNumRows(0);
            ClientesDao dao = new ClientesDao();

            //lista todos os clientes que constam no banco de dados.
            if (texto.equals("")) {

                List<Clientes> lista = dao.listarClientes();

                for (Clientes c : lista) {
                    dados.addRow(new Object[]{
                        c.getId(),
                        c.getNome(),
                        c.getCpf(),
                        c.getCelular()
                    });
                }
                //lista apenas os clientes que comecem com a busca efetuada pelo usuário.     
            } else {
                String nome = txtNome.getText() + "%";

                List<Clientes> lista = dao.consultarPorNome(nome);

                for (Clientes c : lista) {
                    dados.addRow(new Object[]{
                        c.getId(),
                        c.getNome(),
                        c.getCpf(),
                        c.getCelular()
                    });
                }
            }
        }

    }//GEN-LAST:event_txtNomeKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmClientesFiltro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmClientesFiltro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmClientesFiltro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmClientesFiltro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmClientesFiltro().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOk;
    private javax.swing.JButton btnPesquisar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTable tb_Clientes;
    private javax.swing.JTextField txtNome;
    // End of variables declaration//GEN-END:variables
}
