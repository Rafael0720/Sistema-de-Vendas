/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.projeto.view;

import br.com.projeto.dao.ProdutosDao;
import br.com.projeto.dao.SituacaoDao;
import br.com.projeto.model.Produtos;
import br.com.projeto.model.Situacao;
import br.com.projeto.model.Utilitarios;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Rafael Godoy
 */
public class FrmSituacaoFiltro extends javax.swing.JFrame {

    /**
     * essa classe tem o propósito de atender as requisições de venda e de
     * compra. Nas duas opções, se a situação escolhida for "A Vista" a
     * requisição não poderá ser parcelado, tendo apenas um vencimento, que é o
     * mesmo da emição. Já se for "A Prazo", poderá ser parcelada (em até 10x),
     * e terá o vencimento a cada 30 dias, 30/60/90...300. Se for uma requisição
     * de compra, o valor dos itens é o mesmo para as duas opções. Se for uma
     * requisição de venda, com base na situação, o programa retorna o valor à
     * vista ou à prazo.
     */
    String origem = null; // Variável para determinar qual form chamou esse, assim determina quais ações serão executadas
    // de acordo com a origem em questão.

    /**
     * Os métodos mostrarTela especifica qual form chamou esse, esse form pode
     * trocar informações (buscar e levar) com o form que o chamou.
     */
    private FrmVendas vendas;

    public void mostrarTela(FrmVendas vend) {
        this.vendas = vend;
        this.origem = "requisicaoVenda";
        setVisible(true);
    }

    private FrmCompras compras;

    public void mostrarTela(FrmCompras comp) {
        this.compras = comp;
        this.origem = "requisicaoCompra";
        setVisible(true);
    }

    DecimalFormat decimal = new DecimalFormat("#,##0.00");

    public FrmSituacaoFiltro() {
        initComponents();

        Utilitarios util = new Utilitarios();
        util.inserirIcone(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tb_situacao = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(173, 198, 242));
        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        tb_situacao.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tb_situacao.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Modalidade"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tb_situacao.setRowHeight(23);
        tb_situacao.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tb_situacaoMouseClicked(evt);
            }
        });
        tb_situacao.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tb_situacaoKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tb_situacao);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated

        DefaultTableModel dados = (DefaultTableModel) tb_situacao.getModel();
        dados.setNumRows(0);

        SituacaoDao dao = new SituacaoDao();
        List<Situacao> lista = dao.listarSituacao();

        for (Situacao s : lista) {
            dados.addRow(new Object[]{
                s.getId(),
                s.getNome()
            });
        }

    }//GEN-LAST:event_formWindowActivated

    private void tb_situacaoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tb_situacaoKeyPressed


    }//GEN-LAST:event_tb_situacaoKeyPressed

    private void tb_situacaoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tb_situacaoMouseClicked

        if (evt.getClickCount() == 2) {

            if (origem.equals("requisicaoVenda")) {
                String situacao = tb_situacao.getValueAt(tb_situacao.getSelectedRow(), 1).toString();
                vendas.txtIdSituacao.setText(tb_situacao.getValueAt(tb_situacao.getSelectedRow(), 0).toString());
                vendas.txtSituacao.setText(tb_situacao.getValueAt(tb_situacao.getSelectedRow(), 1).toString());
                vendas.txtIdParcelas.setText("1");
                vendas.txtParcelas.setText("Não foi parcelado!");

                if (vendas.situacaoAnterior.equals("")) {
                    // caso seja o inicio e não tenha nenhum item incluído, ele preenche as variáveis.
                    vendas.txtIdCliente.requestFocus();
                    vendas.txtIdCliente.selectAll();

                    if (situacao.equals("A Vista")) {
                        vendas.dias = 0;
                        vendas.situacao = "A Vista";
                        vendas.situacaoAnterior = "A Vista";
                    } else if (situacao.equals("A Prazo")) {
                        vendas.dias = 30;
                        vendas.situacao = "A Prazo";
                        vendas.situacaoAnterior = "A Prazo";
                    }

                } else {
                    /**
                     * caso já houvesse itens cadastrados, ele verifica a
                     * situação atual e faz as alterações necessárias, caso
                     * fosse uma venda a prazo, e foi alterado para a vista, ele
                     * percorre a tabela de itens, e coloca o valor a vista
                     * desses itens, e muda também a regra do parcelamento de
                     * contas. O mesmo é feito para o caso de passar de a vista
                     * para a prazo.
                     */
                    if (situacao.equals("A Vista")) {
                        vendas.dias = 0;
                        vendas.situacao = "A Vista";
                        vendas.situacaoAnterior = "A Vista";
                    } else if (situacao.equals("A Prazo")) {
                        vendas.dias = 30;
                        vendas.situacao = "A Prazo";
                        vendas.situacaoAnterior = "A Prazo";
                    }

                    // percorre a tabela de itens e corrige os valores se necessário, com base na nova situação escolhida.
                    DefaultTableModel tb_itens = (DefaultTableModel) vendas.tb_Itens.getModel();
                    int tb_linhas = tb_itens.getRowCount();

                    if (tb_linhas > 0) {
                        Produtos objProd = new Produtos();
                        ProdutosDao daoProd = new ProdutosDao();
                        double total = 0;

                        if (situacao.equals("A Vista")) {

                            for (int i = 0; i < tb_itens.getRowCount(); i++) {
                                int id_produto = Integer.parseInt(tb_itens.getValueAt(i, 0).toString());
                                int quantidade = Integer.parseInt(tb_itens.getValueAt(i, 3).toString());

                                objProd = daoProd.consultarPorId(id_produto);

                                double preco = objProd.getValor_vista();
                                double subtotal = quantidade * preco;

                                String precoStr = String.valueOf(decimal.format(preco));
                                String subTotalStr = String.valueOf(decimal.format(subtotal));

                                tb_itens.setValueAt(precoStr, i, 2);
                                tb_itens.setValueAt(subTotalStr, i, 4);

                                total += subtotal;
                            }

                        } else if (situacao.equals("A Prazo")) {

                            for (int i = 0; i < tb_itens.getRowCount(); i++) {
                                int id_produto = Integer.parseInt(tb_itens.getValueAt(i, 0).toString());
                                int quantidade = Integer.parseInt(tb_itens.getValueAt(i, 3).toString());

                                objProd = daoProd.consultarPorId(id_produto);

                                double preco = objProd.getValor_venda();
                                double subtotal = quantidade * preco;

                                String precoStr = String.valueOf(decimal.format(preco));
                                String subTotalStr = String.valueOf(decimal.format(subtotal));

                                tb_itens.setValueAt(precoStr, i, 2);
                                tb_itens.setValueAt(subTotalStr, i, 4);

                                total += subtotal;
                            }

                        }

                        //atualiza a tabela de contas para o valor atual, e as permissões de parcelamento.
                        DefaultTableModel tb_contas = (DefaultTableModel) vendas.tb_contas.getModel();
                        tb_contas.setNumRows(0);

                        String id = vendas.txtId.getText();
                        String idFin;

                        int parcelas = 1;
                        int contParc = 0;
                        String parcelaStr;

                        Date emissao = vendas.txtEmissao.getDate();
                        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
                        String emissaoFor = formato.format(emissao);
                        Calendar c = Calendar.getInstance();
                        c.setTime(emissao);

                        Date vencimento;
                        String vencimentoFor;

                        double valorParcela = (total / parcelas);
                        String valorParcelaStr = String.valueOf(decimal.format(valorParcela));
                        String LiqRec = "Rec";

                        for (int i = 0; i < parcelas; i++) {
                            contParc += 1;
                            idFin = id + "-" + contParc;

                            c.add(Calendar.DATE, +vendas.dias);
                            vencimento = c.getTime();
                            vencimentoFor = formato.format(vencimento);

                            parcelaStr = "(" + contParc + "-" + parcelas + ")";

                            tb_contas.addRow(new Object[]{
                                idFin,
                                parcelaStr,
                                emissaoFor,
                                vencimentoFor,
                                "",
                                valorParcelaStr,
                                LiqRec
                            });
                        }
                        vendas.total = total;
                        vendas.txtTotal.setText(String.valueOf(decimal.format(total)));
                    }
                }
                this.dispose();

            } else if (origem.equals("requisicaoCompra")) {
                String situacao = tb_situacao.getValueAt(tb_situacao.getSelectedRow(), 1).toString();

                compras.txtIdSituacao.setText(tb_situacao.getValueAt(tb_situacao.getSelectedRow(), 0).toString());
                compras.txtSituacao.setText(tb_situacao.getValueAt(tb_situacao.getSelectedRow(), 1).toString());
                compras.txtIdParcelas.setText("1");
                compras.txtParcelas.setText("Não foi parcelado!");

                if (compras.situacaoAnterior.equals("")) {
                    // caso seja o inicio e não tenha nenhum item incluído, ele preenche as variáveis.
                    compras.txtIdFornecedor.requestFocus();
                    compras.txtIdFornecedor.selectAll();

                    if (situacao.equals("A Vista")) {
                        compras.dias = 0;
                        compras.situacao = "A Vista";
                        compras.situacaoAnterior = "A Vista";
                    } else if (situacao.equals("A Prazo")) {
                        compras.dias = 30;
                        compras.situacao = "A Prazo";
                        compras.situacaoAnterior = "A Prazo";
                    }

                } else {
                    /**
                     * caso já houvesse itens cadastrados, ele verifica a
                     * situação atual e faz as alterações necessárias, mudando a
                     * regra do parcelamento de contas.
                     */
                    if (situacao.equals("A Vista")) {
                        compras.dias = 0;
                        compras.situacao = "A Vista";
                        compras.situacaoAnterior = "A Vista";
                    } else if (situacao.equals("A Prazo")) {
                        compras.dias = 30;
                        compras.situacao = "A Prazo";
                        compras.situacaoAnterior = "A Prazo";
                    }

                    DefaultTableModel tb_itens = (DefaultTableModel) compras.tb_Itens.getModel();
                    int tb_linhas = tb_itens.getRowCount();

                    if (tb_linhas > 0) {
                        double total = compras.total;

                        DefaultTableModel tb_contas = (DefaultTableModel) compras.tb_contas.getModel();
                        tb_contas.setNumRows(0);

                        String id = compras.txtId.getText();
                        String idFin;

                        int parcelas = 1;
                        int contParc = 0;
                        String parcelaStr;

                        Date emissao = compras.txtEmissao.getDate();
                        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
                        String emissaoFor = formato.format(emissao);
                        Calendar c = Calendar.getInstance();
                        c.setTime(emissao);

                        Date vencimento;
                        String vencimentoFor;

                        double valorParcela = (total / parcelas);
                        String valorParcelaStr = String.valueOf(decimal.format(valorParcela));
                        String LiqRec = "Pag";

                        for (int i = 0; i < parcelas; i++) {
                            contParc += 1;
                            idFin = id + "-" + contParc;

                            c.add(Calendar.DATE, +compras.dias);
                            vencimento = c.getTime();
                            vencimentoFor = formato.format(vencimento);

                            parcelaStr = "(" + contParc + "-" + parcelas + ")";

                            tb_contas.addRow(new Object[]{
                                idFin,
                                parcelaStr,
                                emissaoFor,
                                vencimentoFor,
                                "",
                                valorParcelaStr,
                                LiqRec
                            });
                        }
                    }
                }
                this.dispose();
            }
        }
    }//GEN-LAST:event_tb_situacaoMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmSituacaoFiltro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmSituacaoFiltro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmSituacaoFiltro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmSituacaoFiltro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmSituacaoFiltro().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tb_situacao;
    // End of variables declaration//GEN-END:variables
}
